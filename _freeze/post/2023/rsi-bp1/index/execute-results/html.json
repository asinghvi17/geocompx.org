{
  "hash": "2b21454dd2e2fe52a4dfdf532676b5ec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"An overview of the rsi R package for retrieving satellite imagery and calculating spectral indices\" \nauthor: \"Mateusz Rydzik\"\ndate: \"2023-12-18\"\nslug: \ncategories: \n  - rstats\ntags: [rspatial, rstats]\ndraft: true\nexecute: \n  warning: false\n---\n\n\n# Introduction\n\n[**rsi**](https://permian-global-research.github.io/rsi/) is a recent R package developed by [Michael Mahoney](https://www.mm218.dev/) and funded by Permian Global Research.\nIt offers features that simplify the process of acquiring spatial data from STAC (*SpatioTemporal Asset Catalog*) and calculating spectral indices based on such data.\nA unique feature of this package is its source for the indices.\nInstead of providing a static list of available formulas, **rsi** obtains them from [Awesome Spectral Indices](https://awesome-ee-spectral-indices.readthedocs.io/en/latest/): a curated repository of over 200 indices covering multiple application domains.\nThe combination of satellite imagery access through STAC and a constantly expanding spectral indices repository significantly simplifies remote sensing processes and creates new opportunities, including the automation of calculating spectral indices over a wide span of time and area.\n\n# Set up\n\n**rsi** is available in development version on [GitHub](https://github.com/Permian-Global-Research/rsi), which can be installed with [pak](https://pak.r-lib.org/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"Permian-Global-Research/rsi\")\n```\n:::\n\n\nTo acquire the newest Awesome Spectral Indices dataset, we can call [`spectral_indices()`](https://permian-global-research.github.io/rsi/reference/spectral_indices.html). \nCalling it without passing any arguments will result in using cached version of the tibble, which is updated automatically once a day.\nThis tibble contains column with indices formulas, which are using standardized band names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rsi)\nasi = spectral_indices(download_indices = TRUE)\nasi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 231 × 9\n   application_domain bands     contributor   date_of_addition formula long_name\n   <chr>              <list>    <chr>         <chr>            <chr>   <chr>    \n 1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol …\n 2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol …\n 3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente…\n 4 vegetation         <chr [2]> https://gith… 2021-09-20       (1 / G… Anthocya…\n 5 vegetation         <chr [3]> https://gith… 2022-04-08       N * ((… Anthocya…\n 6 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe…\n 7 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted…\n 8 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced…\n 9 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate…\n10 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate…\n# ℹ 221 more rows\n# ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr>\n```\n\n\n:::\n:::\n\n\n# Acquiring STAC data\n\n**rsi** provides [`get_stac_data()`](https://permian-global-research.github.io/rsi/reference/get_stac_data.html#ref-usage) function, built around the **rstac** package.\nIt allows to connect to specified STAC source, and access data, based on selected attributes, like geospatial area of interest, date of acquisition of imagery, collection name, etc.\nFor users convenience, **rsi** comes with additional functions that facilitate `get_stac_data()` function, providing necessary parameters, and limiting users input to specifying area of interest and a time frame of imagery. \nThose functions allow to access Landsat, Sentinel 1-2 imagery and digital elevation models (DEMs), available on Microsoft's Planetary Computer.\n\nLet's start with creating our area of interest. \n`get_stac_data()` accepts `sf` objects from which it extracts boundaries, so we can load in already existing data source, or create our own.\nFor this example, we will create area of interest of 5000 meters around a point in San Antonio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nsan_antonio = st_point(c(-98.491142, 29.424349))\nsan_antonio = st_set_crs(st_sfc(san_antonio), \"EPSG:4326\")\nsan_antonio = st_buffer(st_transform(san_antonio, \"EPSG:3081\"), 5000)\n```\n:::\n\n\nHaving specified the area of interest, we can create our query.oo\nWe will start with downloading Landsat data for September and October 2023 and save it to a temporary file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsa_landsat = get_landsat_imagery(\n    san_antonio,\n    start_date = \"2023-09-01\",\n    end_date = \"2023-10-31\",\n    output_filename = tempfile(fileext = \".tif\")\n)\nsa_landsat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/tmp/RtmpWfpOF3/file18148e1dd6b840.tif\"\n```\n\n\n:::\n:::\n\n\n`get_stac_data()` and its child functions return the path to downloaded image. \nAs a default, they create the composite image out of median values of all avaiable images for specified time span. \nWe can specify other composite functions, like `mean`, `sum`, `min` or `max`. \nWe can also not use composite function at all (`composite_function = NULL`), and obtain all available images for specified time span. \nAnother default argument, passed in for `mask_band`, automatically masks clouds with NAs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsa_sentinel2 = get_sentinel2_imagery(\n    san_antonio,\n    start_date = \"2023-09-01\",\n    end_date = \"2023-10-31\",\n    output_filename = tempfile(fileext = \".tif\")\n)\n```\n:::\n\n\nIn this example, we download Sentinel 2 images for September and October 2023, mask out clouds, and create a composite image.\n\nLet's also obtain the DEM of our area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsa_dem = get_dem(\n  san_antonio,\n  output_filename = tempfile(fileext = \".tif\")\n)\n```\n:::\n\n\nAfter downloading the images, we can load them into `SpatRaster` objects using [`rast()`](https://rdrr.io/cran/terra/man/rast.html).\n**rsi** automatically assigns proper band names to it, which follow Awesome Spectral Indices standard.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\nsa_landsat_rast = terra::rast(sa_landsat)\nsa_sentinel2_rast = terra::rast(sa_sentinel2)\nsa_dem_rast = terra::rast(sa_dem)\nsa_landsat_rast\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 333, 333, 8  (nrow, ncol, nlyr)\nresolution  : 30, 30  (x, y)\nextent      : 1141169, 1151159, 803238.7, 813228.7  (xmin, xmax, ymin, ymax)\ncoord. ref. : NAD83 / Texas State Mapping System (EPSG:3081) \nsource      : file18148e1dd6b840.tif \nnames       : A, B, G, R, N, S1, ... \n```\n\n\n:::\n:::\n\n\nWe can plot the rasters together to compare Landsat and Sentinel images and visualize DEM.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 3))\nterra::plotRGB(sa_landsat_rast, r = 4, g = 3, b = 2, stretch = \"lin\")\nterra::plotRGB(sa_sentinel2_rast, r = 4, g = 3, b = 2, stretch = \"lin\")\nterra::plot(sa_dem_rast)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plotting rasters-1.png){width=672}\n:::\n:::\n\n\n# Calculating spectral indices\n\nHaving downloaded images, we can use them to calculate spectral indices. \nIn this example, we will observe the change in vegetation between two dates for the Swarzędz area in Poland.\nLet's start by creating a new area of interest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nswarzedz = st_point(c(17.108174, 52.405725))\nswarzedz = st_set_crs(st_sfc(swarzedz), \"EPSG:4326\")\nswarzedz = st_buffer(st_transform(swarzedz, \"EPSG:2180\"), 5000)\n```\n:::\n\n\nFor the most accurate results, we will use Sentinel 2 data. \nThe date span is set from July to September 2023. \nWe will also pass in `composite_function = NULL`, so that all available images will be downloaded separately.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nswarzedz_sentinel2_sep = get_sentinel2_imagery(\n    swarzedz,\n    start_date = \"2023-07-01\",\n    end_date = \"2023-09-30\",\n    output_filename = tempfile(fileext = \".tif\"),\n    composite_function = NULL\n)\n\nswarzedz_sentinel2_sep\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-09-27T10:00:31.024000Z.tif\"\n [2] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-09-22T09:56:49.024000Z.tif\"\n [3] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-09-17T10:00:31.024000Z.tif\"\n [4] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-09-12T09:56:09.024000Z.tif\"\n [5] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-09-07T10:00:31.024000Z.tif\"\n [6] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-09-02T09:55:59.024000Z.tif\"\n [7] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-08-28T10:00:31.025000Z.tif\"\n [8] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-08-23T09:55:59.024000Z.tif\"\n [9] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-08-18T10:00:31.024000Z.tif\"\n[10] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-08-13T09:55:59.024000Z.tif\"\n[11] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-08-08T10:00:31.024000Z.tif\"\n[12] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-08-03T09:55:59.024000Z.tif\"\n[13] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-07-29T10:00:31.024000Z.tif\"\n[14] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-07-19T10:00:31.024000Z.tif\"\n[15] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-07-14T09:55:59.024000Z.tif\"\n[16] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-07-09T10:00:31.024000Z.tif\"\n[17] \"/tmp/RtmpWfpOF3/file18148e45688c55_2023-07-04T09:55:59.024000Z.tif\"\n```\n\n\n:::\n:::\n\n\n**rsi** does not include any cloud filtering methods, but [we can use CQL2 queries](https://github.com/Permian-Global-Research/rsi/issues/6#issuecomment-1821148413) to modify **rsi**'s filter functions. \nIn this case, we will skip this step and select two images that are not covered in clouds.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nswarzedz_sentinel2_07_09 = terra::rast(swarzedz_sentinel2_sep[16])\nswarzedz_sentinel2_09_27 = terra::rast(swarzedz_sentinel2_sep[1])\n```\n:::\n\n\n**rsi**'s [calculate_indices()](https://permian-global-research.github.io/rsi/reference/calculate_indices.html) requires a data frame of indices to calculate.\nSince we want to calculate [NDVI](https://en.wikipedia.org/wiki/Normalized_difference_vegetation_index), all we need to do is extract the row with NDVI's formula. \nWe can use the `short_name` column for that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nndvi = asi[asi$short_name == \"NDVI\", ]\nswarzedz_sentinel2_07_09_ndvi = calculate_indices(\n    swarzedz_sentinel2_07_09,\n    ndvi,\n    output_filename = tempfile(fileext = \".tif\")\n)\nswarzedz_sentinel2_09_27_ndvi = calculate_indices(\n    swarzedz_sentinel2_09_27,\n    ndvi,\n    output_filename = tempfile(fileext = \".tif\")\n)\nswarzedz_sentinel2_07_09_ndvi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/tmp/RtmpWfpOF3/file18148e5eedf300.tif\"\n```\n\n\n:::\n:::\n\n\nWe now can plot both rasters to see the values that were calculated for both dates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\nswarzedz_sentinel2_07_09_ndvi_rast = terra::rast(swarzedz_sentinel2_07_09_ndvi)\nswarzedz_sentinel2_09_27_ndvi_rast = terra::rast(swarzedz_sentinel2_09_27_ndvi)\nterra::plot(swarzedz_sentinel2_07_09_ndvi_rast, range = c(-1, 1))\nterra::plot(swarzedz_sentinel2_09_27_ndvi_rast, range = c(-1, 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plotting NDVI rasters-1.png){width=672}\n:::\n:::\n\n\nTo better visualize the change in NDVI over time, we can create a difference raster.\nValues above 0 indicate that NDVI was higher on October 27 than on July 9. \nValues below 0 indicate that the NDVI values decreased on October 27, compared to July 9. \nValues equal to 0 mean that NDVI values haven't changed over time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\ndif = swarzedz_sentinel2_09_27_ndvi_rast - swarzedz_sentinel2_07_09_ndvi_rast\nterra::plot(dif)\nhist(dif, main = \"\", xlab = \"NDVI\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/calculating difference raster-1.png){width=672}\n:::\n:::\n\n\nWe can save both rasters as one, using [`stack_rasters()`](https://permian-global-research.github.io/rsi/reference/stack_rasters.html) function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstack = stack_rasters(\n  c(\n    swarzedz_sentinel2_07_09_ndvi,\n    swarzedz_sentinel2_09_27_ndvi\n  ),\n  tempfile(fileext = \".vrt\")\n)\nstack_rast = terra::rast(stack)\nnames(stack_rast) = c(\"NDVI 07.09\", \"NDVI 09.27\")\nstack_rast\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 1000, 1000, 2  (nrow, ncol, nlyr)\nresolution  : 10, 10  (x, y)\nextent      : 366347.1, 376347.1, 501106.3, 511106.3  (xmin, xmax, ymin, ymax)\ncoord. ref. : ETRF2000-PL / CS92 (EPSG:2180) \nsource      : file18148eec3b7ed.vrt \nnames       : NDVI 07.09, NDVI 09.27 \nmin values  : -0.1237687, -0.5265973 \nmax values  :  0.7251614,  0.7040647 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nterra::plot(stack_rast, range = c(-1, 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plotting stack rasters-1.png){width=672}\n:::\n:::\n\n\n# Conclusion\n\nThe goal of this article was to demonstrate the capabilities of **rsi** package on the most common examples in remote sensing tasks.\nIt's current state already shows huge potential in many remote sensing applications. \n**rsi** provides functions which simplify processes of downloading satellite imagery and calculating spectral indices.\nIf you want to learn more about **rsi** package, you can visit [GitHub repository of the project](https://github.com/Permian-Global-Research/rsi).\n\nWhile working on this article, I found many posibble features that could be added into **rsi**.\nAn useful feature would be adding methods of simpler product filtering, based on cloud coverage and other parameters. \nOther feature could be focused on time series analysis, by calculating indices for each available item in selected time span.\n\nI'm looking forward into the future developements of **rsi**. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}